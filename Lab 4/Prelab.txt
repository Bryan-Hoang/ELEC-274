=================================================
C Code: 	8 lines of code
ASM Code: 	~24 lines of (relevant) code
Ratio:		1/3
=================================================

int compareStrings(char *s1, char *s2) {
	
	char c1, c2;
	
    do {
		c1 = *(s1++);
		c2 = *(s2++);
		char charDiff = c1 - c2;
		if(c1 == 0 || c2 == 0) break;
    } while(c1 == c2);
	
	return c1 - c2;
	
}

	.equ	LAST_RAM_WORD,	0x007FFFFC

	.text				# tell assembler that this is code segment
	.global	_start		# tell assembler that _start is visible to linker

	.org	0x00000000	# starting address for following code

_start:
	movia	sp, LAST_RAM_WORD

	movia	r3, MSG1
	movia	r4, MSG2
	call compareStrings
	
compareStrings:
	subi	sp, sp, 12		# room to save 4 registers
	stw		r3, 12(sp)		# save contents of r3
	stw		r4, 8(sp)		# save contents of r4
	stw		r5, 4(sp)		# save contents of r3
	stw		r6, 0(sp)		# save contents of r4
	
loop:
	ldb		r5, 0(r3)		# fetch the byte pointed to by r3
	ldb		r6, 0(r4)		# fetch the byte pointed to by r4
	addi	r3, r3, 1		# increment r3 pointer
	addi	r4, r4, 1		# increment r4 pointer
	beq		r5, r0, done	# if char value 1 is 0, we're done.
	beq		r6, r0, done	# if char value 2 is 0, we're done.
	beq		r5, r6, loop	# if char values match, do next character
done:
	sub		r7, r5, r6
	
	ldw		r3, 12(sp)
	ldw		r4, 8(sp)
	ldw		r5, 4(sp)
	ldw		r6, 0(sp)
	addi	sp, sp, 12	# add 12 to sp, effectively discarding space on stack
	ret					# go back to calling site, all registers preserved

	.org	0x00001000	# where this code is to go in memory
MSG1:.asciz	"string1"	
MSG2:.asciz	"string2"	

	.end				# tells assembler this is the end